/**
 * Simple PDF Export Service for RadioForms
 * 
 * Following MANDATORY.md: simple PDF generation for emergency responders.
 * Creates readable PDFs without complex layouts - just clear, printable form data.
 */

import { jsPDF } from 'jspdf';
import type { SimpleForm } from './formService';

/**
 * Simple PDF export options
 */
interface PDFExportOptions {
  /** Include timestamp in filename */
  includeTimestamp?: boolean;
  /** Page orientation */
  orientation?: 'portrait' | 'landscape';
}

/**
 * Generate PDF for a single form
 * Following MANDATORY.md: simple, readable PDF for emergency use
 */
export async function exportFormToPDF(
  form: SimpleForm, 
  options: PDFExportOptions = {}
): Promise<void> {
  const { includeTimestamp = true, orientation = 'portrait' } = options;
  
  // Create new PDF document
  const doc = new jsPDF({
    orientation,
    unit: 'mm',
    format: 'a4'
  });
  
  let yPosition = 20;
  const lineHeight = 7;
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  
  // Helper function to add text with line wrapping
  const addText = (text: string, isBold = false) => {
    if (isBold) {
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setFont('helvetica', 'normal');
    }
    
    // Check if we need a new page
    if (yPosition > 270) {
      doc.addPage();
      yPosition = 20;
    }
    
    const lines = doc.splitTextToSize(text, maxWidth);
    doc.text(lines, margin, yPosition);
    yPosition += lines.length * lineHeight;
  };
  
  // Add title
  doc.setFontSize(16);
  addText(`${form.form_type} - Emergency Response Form`, true);
  yPosition += 5;
  
  // Add incident information
  doc.setFontSize(12);
  addText(`Incident: ${form.incident_name}`, true);
  addText(`Status: ${form.status.toUpperCase()}`);
  addText(`Created: ${new Date(form.created_at).toLocaleString()}`);
  addText(`Last Updated: ${new Date(form.updated_at).toLocaleString()}`);
  yPosition += 5;
  
  // Add separator line
  doc.setLineWidth(0.5);
  doc.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 10;
  
  // Add form data
  doc.setFontSize(14);
  addText('Form Data:', true);
  yPosition += 2;
  
  doc.setFontSize(10);
  try {
    const formData = JSON.parse(form.form_data);
    
    // If it's an object, display key-value pairs
    if (typeof formData === 'object' && formData !== null) {
      for (const [key, value] of Object.entries(formData)) {
        if (value !== null && value !== undefined && value !== '') {
          const displayKey = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          const displayValue = typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value);
          addText(`${displayKey}: ${displayValue}`);
        }
      }
    } else {
      // If it's not an object, just display the raw data
      addText(`Data: ${String(formData)}`);
    }
  } catch {
    // If JSON parsing fails, display raw data
    addText('Raw Form Data:');
    addText(form.form_data);
  }
  
  // Add footer
  yPosition += 10;
  doc.setLineWidth(0.5);
  doc.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 8;
  
  doc.setFontSize(8);
  doc.setFont('helvetica', 'normal');
  addText(`Generated by RadioForms on ${new Date().toLocaleString()}`);
  addText(`Form ID: ${form.id} | Emergency Response Documentation`);
  
  // Generate filename
  const timestamp = includeTimestamp ? `_${new Date().toISOString().slice(0, 10)}` : '';
  const filename = `${form.form_type}_${form.incident_name.replace(/[^a-zA-Z0-9]/g, '_')}${timestamp}.pdf`;
  
  // Save the PDF
  doc.save(filename);
}

/**
 * Export multiple forms to separate PDFs
 * Following MANDATORY.md: simple batch operation for emergency responders
 */
export async function exportMultipleFormsToPDF(
  forms: SimpleForm[], 
  options: PDFExportOptions = {}
): Promise<void> {
  if (forms.length === 0) {
    throw new Error('No forms to export');
  }
  
  // Export each form individually
  for (const form of forms) {
    await exportFormToPDF(form, options);
    // Small delay to prevent overwhelming the browser
    await new Promise(resolve => globalThis.setTimeout(resolve, 100));
  }
}

/**
 * Create a summary PDF of multiple forms
 * Following MANDATORY.md: simple overview for incident commanders
 */
export async function exportFormsSummaryToPDF(forms: SimpleForm[]): Promise<void> {
  if (forms.length === 0) {
    throw new Error('No forms to export');
  }
  
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });
  
  let yPosition = 20;
  const lineHeight = 6;
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  
  // Helper function to add text
  const addText = (text: string, fontSize = 10, isBold = false) => {
    doc.setFontSize(fontSize);
    doc.setFont('helvetica', isBold ? 'bold' : 'normal');
    
    if (yPosition > 270) {
      doc.addPage();
      yPosition = 20;
    }
    
    const lines = doc.splitTextToSize(text, maxWidth);
    doc.text(lines, margin, yPosition);
    yPosition += lines.length * lineHeight;
  };
  
  // Add title
  addText('Emergency Response Forms Summary', 16, true);
  yPosition += 5;
  
  addText(`Generated: ${new Date().toLocaleString()}`, 10);
  addText(`Total Forms: ${forms.length}`, 10);
  yPosition += 10;
  
  // Group forms by incident
  const formsByIncident = forms.reduce((acc, form) => {
    if (!acc[form.incident_name]) {
      acc[form.incident_name] = [];
    }
    acc[form.incident_name].push(form);
    return acc;
  }, {} as Record<string, SimpleForm[]>);
  
  // List forms by incident
  for (const [incidentName, incidentForms] of Object.entries(formsByIncident)) {
    addText(`Incident: ${incidentName}`, 12, true);
    yPosition += 2;
    
    for (const form of incidentForms) {
      addText(`  â€¢ ${form.form_type} (${form.status}) - Updated ${new Date(form.updated_at).toLocaleDateString()}`, 9);
    }
    yPosition += 5;
  }
  
  // Add footer
  yPosition += 10;
  doc.setLineWidth(0.5);
  doc.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 8;
  
  addText('Generated by RadioForms | Emergency Response Documentation', 8);
  
  // Save the summary
  const filename = `Forms_Summary_${new Date().toISOString().slice(0, 10)}.pdf`;
  doc.save(filename);
}