       Fresh autocfg v1.4.0
       Fresh pkg-config v0.3.32
       Fresh version-compare v0.2.0
       Fresh version_check v0.9.5
       Fresh target-lexicon v0.12.16
       Fresh libc v0.2.172
       Fresh syn v1.0.109
       Fresh zerocopy v0.8.25
       Fresh smallvec v1.15.0
       Fresh memchr v2.7.4
       Fresh serde_derive v1.0.219
       Fresh cfg-expr v0.15.8
       Fresh synstructure v0.13.2
       Fresh zerovec-derive v0.11.1
       Fresh displaydoc v0.2.5
       Fresh ppv-lite86 v0.2.21
       Fresh thiserror-impl v1.0.69
       Fresh rand_core v0.6.4
       Fresh serde v1.0.219
       Fresh zerofrom-derive v0.1.6
       Fresh yoke-derive v0.8.0
       Fresh getrandom v0.1.16
       Fresh rand_chacha v0.3.1
       Fresh shlex v1.3.0
       Fresh thiserror-impl v2.0.12
       Fresh rand_core v0.5.1
       Fresh rand v0.8.5
       Fresh cc v1.2.25
       Fresh rand_pcg v0.2.1
       Fresh rand_chacha v0.2.2
       Fresh phf_generator v0.11.3
       Fresh phf_generator v0.10.0
       Fresh cfg-if v1.0.0
       Fresh rand v0.7.3
       Fresh proc-macro-hack v0.5.20+deprecated
       Fresh string_cache_codegen v0.5.4
       Fresh phf_codegen v0.10.0
       Fresh bitflags v2.9.1
       Fresh system-deps v6.2.2
       Fresh phf_generator v0.8.0
       Fresh cssparser-macros v0.6.1
       Fresh strsim v0.11.1
       Fresh ident_case v1.0.1
       Fresh phf_macros v0.8.0
       Fresh phf_codegen v0.8.0
       Fresh stable_deref_trait v1.2.0
       Fresh darling_core v0.20.11
       Fresh winnow v0.5.40
       Fresh convert_case v0.4.0
       Fresh darling_macro v0.20.11
       Fresh futures-macro v0.3.31
       Fresh glib-sys v0.18.1
       Fresh derive_more v0.99.20
       Fresh darling v0.20.11
       Fresh zerofrom v0.1.6
       Fresh gobject-sys v0.18.0
       Fresh serde_with_macros v3.12.0
       Fresh proc-macro-error-attr v1.0.4
       Fresh yoke v0.8.0
       Fresh phf_macros v0.11.3
       Fresh rustc_version v0.4.1
       Fresh gio-sys v0.18.1
       Fresh log v0.4.27
       Fresh proc-macro-error v1.0.4
       Fresh toml_edit v0.20.7
       Fresh getrandom v0.3.3
       Fresh proc-macro-crate v2.0.0
       Fresh zerovec v0.11.2
       Fresh ctor v0.2.9
       Fresh scopeguard v1.2.0
       Fresh heck v0.4.1
       Fresh lock_api v0.4.13
       Fresh glib-macros v0.18.5
       Fresh serde_derive_internals v0.29.1
       Fresh once_cell v1.21.3
       Fresh glib v0.18.5
       Fresh camino v1.1.9
       Fresh schemars_derive v0.8.22
       Fresh gdk-pixbuf-sys v0.18.0
       Fresh cairo-sys-rs v0.18.2
       Fresh pango-sys v0.18.0
       Fresh cargo-platform v0.1.9
       Fresh thiserror v1.0.69
       Fresh dyn-clone v1.0.19
       Fresh cargo_metadata v0.19.2
       Fresh tinystr v0.8.1
       Fresh schemars v0.8.22
       Fresh parking_lot_core v0.9.11
       Fresh itoa v1.0.15
       Fresh writeable v0.6.1
       Fresh litemap v0.8.0
       Fresh gdk-sys v0.18.2
       Fresh potential_utf v0.1.2
       Fresh zerotrie v0.2.2
       Fresh parking_lot v0.12.4
       Fresh icu_locale_core v2.0.0
       Fresh icu_collections v2.0.0
       Fresh icu_properties_data v2.0.1
       Fresh icu_normalizer_data v2.0.0
       Fresh siphasher v0.3.11
       Fresh percent-encoding v2.3.1
       Fresh atk-sys v0.18.2
       Fresh icu_provider v2.0.0
       Fresh gio v0.18.4
       Fresh tracing-attributes v0.1.28
       Fresh equivalent v1.0.2
       Fresh foldhash v0.1.5
       Fresh allocator-api2 v0.2.21
       Fresh ryu v1.0.20
       Fresh form_urlencoded v1.2.1
       Fresh icu_properties v2.0.1
       Fresh icu_normalizer v2.0.0
       Fresh memoffset v0.9.1
       Fresh hashbrown v0.15.3
       Fresh bytes v1.10.1
       Fresh utf8_iter v1.0.4
       Fresh pango v0.18.3
       Fresh gdk-pixbuf v0.18.5
       Fresh gtk-sys v0.18.2
       Fresh idna_adapter v1.2.1
       Fresh serde_json v1.0.140
       Fresh cairo-rs v0.18.5
       Fresh embed-resource v3.0.3
       Fresh toml_edit v0.19.15
       Fresh winnow v0.7.10
       Fresh bitflags v1.3.2
       Fresh siphasher v1.0.1
       Fresh new_debug_unreachable v1.0.6
       Fresh indexmap v2.9.0
       Fresh idna v1.0.3
       Fresh gdk v0.18.2
       Fresh tauri-winres v0.3.1
       Fresh proc-macro-crate v1.3.1
       Fresh phf_shared v0.11.3
       Fresh cargo_toml v0.22.1
       Fresh thiserror v2.0.12
       Fresh aho-corasick v1.1.3
       Fresh signal-hook-registry v1.4.5
       Fresh regex-syntax v0.8.5
       Fresh mac v0.1.1
       Fresh url v2.5.4
       Fresh byteorder v1.5.0
       Fresh precomputed-hash v0.1.1
       Fresh gtk3-macros v0.18.2
       Fresh futf v0.1.5
       Fresh regex-automata v0.4.9
       Fresh tauri-build v2.2.0
       Fresh field-offset v0.3.6
       Fresh phf_shared v0.10.0
       Fresh phf_shared v0.8.0
       Fresh atk v0.18.2
       Fresh dtoa v1.0.10
       Fresh fnv v1.0.7
       Fresh futures-core v0.3.31
       Fresh simd-adler32 v0.3.7
       Fresh utf-8 v0.7.6
       Fresh pin-project-lite v0.2.16
       Fresh regex v1.11.1
       Fresh string_cache v0.8.9
       Fresh phf v0.8.0
       Fresh dtoa-short v0.3.5
       Fresh tendril v0.4.3
       Fresh gtk v0.18.2
       Fresh phf v0.10.1
       Fresh tauri-plugin v2.2.0
       Fresh getrandom v0.2.16
       Fresh nodrop v0.1.14
       Fresh alloc-no-stdlib v2.0.4
       Fresh adler2 v2.0.0
       Fresh itoa v0.4.8
       Fresh unic-common v0.9.0
       Fresh powerfmt v0.2.0
       Fresh matches v0.1.10
       Fresh unic-char-range v0.9.0
       Fresh x11 v2.21.0
       Fresh soup3-sys v0.5.0
       Fresh markup5ever v0.11.0
       Fresh alloc-stdlib v0.2.2
       Fresh unic-char-property v0.9.0
       Fresh time-macros v0.2.22
       Fresh deranged v0.4.0
       Fresh unic-ucd-version v0.9.0
       Fresh miniz_oxide v0.8.8
       Fresh cssparser v0.27.2
       Fresh servo_arc v0.1.1
       Fresh javascriptcore-rs-sys v1.1.1
       Fresh fxhash v0.2.1
       Fresh event-listener-strategy v0.5.4
       Fresh typeid v1.0.3
       Fresh serde_spanned v0.6.8
       Fresh uuid v1.17.0
       Fresh dpi v0.1.2
       Fresh toml_datetime v0.6.9
       Fresh enumflags2_derive v0.7.11
       Fresh tokio-macros v2.5.0
       Fresh crc32fast v1.4.2
       Fresh raw-window-handle v0.6.2
       Fresh time-core v0.1.4
       Fresh fastrand v2.3.0
       Fresh thin-slice v0.1.1
       Fresh num-conv v0.1.0
       Fresh futures-sink v0.3.31
       Fresh hashbrown v0.12.3
       Fresh vcpkg v0.2.15
       Fresh toml_write v0.1.1
       Fresh cfb v0.7.3
       Fresh toml_edit v0.22.26
       Fresh indexmap v1.9.3
       Fresh time v0.3.41
       Fresh selectors v0.22.0
       Fresh flate2 v1.1.1
       Fresh erased-serde v0.4.6
       Fresh brotli-decompressor v4.0.3
       Fresh gdkx11-sys v0.18.2
       Fresh unic-ucd-ident v0.9.0
       Fresh html5ever v0.26.0
       Fresh fdeflate v0.3.7
       Fresh http v1.3.1
       Fresh jsonptr v0.6.3
       Fresh typenum v1.18.0
       Fresh proc-macro-crate v3.3.0
       Fresh crossbeam-utils v0.8.21
       Fresh unicode-ident v1.0.18
       Fresh zeroize v1.8.1
       Fresh same-file v1.0.6
       Fresh zvariant_derive v5.5.3
       Fresh rustls-pki-types v1.12.0
       Fresh brotli v7.0.0
       Fresh png v0.17.16
       Fresh json-patch v3.0.1
       Fresh generic-array v0.14.7
       Fresh urlpattern v0.3.0
       Fresh proc-macro2 v1.0.95
       Fresh kuchikiki v0.8.2
       Fresh toml v0.8.22
       Fresh semver v1.0.26
       Fresh walkdir v2.5.0
       Fresh x11-dl v2.21.0
       Fresh cookie v0.18.1
       Fresh serde-untagged v0.1.7
       Fresh futures-lite v2.6.0
       Fresh infer v0.19.0
       Fresh webkit2gtk-sys v2.0.1
       Fresh javascriptcore-rs v1.1.2
       Fresh soup3 v0.5.0
       Fresh phf v0.11.3
       Fresh anyhow v1.0.98
       Fresh serde_with v3.12.0
       Fresh crossbeam-channel v0.5.15
       Fresh slab v0.4.9
       Fresh dlopen2_derive v0.4.1
       Fresh mio v1.0.4
       Fresh socket2 v0.5.10
       Fresh linux-raw-sys v0.9.4
       Fresh glob v0.3.2
       Fresh futures-io v0.3.31
       Fresh dunce v1.0.5
       Fresh futures-task v0.3.31
       Fresh pin-utils v0.1.0
       Fresh webkit2gtk v2.0.1
       Fresh rustix v1.0.7
       Fresh tauri-utils v2.4.0
       Fresh dlopen2 v0.7.0
       Fresh tokio v1.45.1
       Fresh futures-util v0.3.31
       Fresh quote v1.0.40
       Fresh ico v0.4.0
       Fresh concurrent-queue v2.5.0
       Fresh gdkx11 v0.18.2
       Fresh gdkwayland-sys v0.18.2
       Fresh tracing-core v0.1.33
       Fresh unicode-segmentation v1.12.0
       Fresh lazy_static v1.5.0
       Fresh untrusted v0.9.0
       Fresh option-ext v0.2.0
       Fresh parking v2.2.1
       Fresh tauri-runtime v2.6.0
       Fresh syn v2.0.101
       Fresh polling v3.8.0
       Fresh wry v0.51.2
       Fresh dirs-sys v0.5.0
       Fresh tao v0.33.0
       Fresh tracing v0.1.41
       Fresh event-listener v5.4.0
       Fresh keyboard-types v0.7.0
       Fresh ring v0.17.14
       Fresh tauri-codegen v2.2.0
       Fresh block-buffer v0.10.4
       Fresh crypto-common v0.1.6
       Fresh async-lock v3.4.0
       Fresh num-traits v0.2.19
       Fresh serde_repr v0.1.20
       Fresh serialize-to-javascript-impl v0.1.1
       Fresh cfg_aliases v0.2.1
       Fresh async-task v4.7.1
       Fresh static_assertions v1.1.0
       Fresh serialize-to-javascript v0.1.1
       Fresh digest v0.10.7
       Fresh async-io v2.4.1
       Fresh dirs v6.0.0
       Fresh rustls-webpki v0.103.3
       Fresh muda v0.16.1
       Fresh tauri-macros v2.2.0
       Fresh tauri-runtime-wry v2.6.0
       Fresh zvariant_utils v3.2.0
       Fresh futures-executor v0.3.31
       Fresh webpki-roots v1.0.0
       Fresh futures-channel v0.3.31
       Fresh enumflags2 v0.7.11
       Fresh async-channel v2.3.1
       Fresh cpufeatures v0.2.17
       Fresh endi v1.1.0
       Fresh crc-catalog v2.4.0
       Fresh heck v0.5.0
       Fresh subtle v2.6.1
       Fresh mime v0.3.17
       Fresh atomic-waker v1.1.2
       Fresh iana-time-zone v0.1.63
       Fresh crc v3.3.0
       Fresh webpki-roots v0.26.11
       Fresh sha2 v0.10.9
       Fresh zvariant v5.5.3
       Fresh async-signal v0.2.11
       Fresh tokio-stream v0.1.17
       Fresh chrono v0.4.41
       Fresh rustls v0.23.27
       Fresh tauri v2.5.1
       Fresh piper v0.2.4
       Fresh hashlink v0.10.0
       Fresh futures-intrusive v0.5.0
       Fresh spin v0.9.8
       Fresh crossbeam-queue v0.3.12
       Fresh either v1.15.0
       Fresh is-docker v0.2.0
       Fresh utf8parse v0.2.2
       Fresh dotenvy v0.15.7
       Fresh base64 v0.22.1
       Fresh is-wsl v0.4.0
       Fresh blocking v1.6.1
       Fresh sqlx-macros-core v0.8.6
       Fresh anstyle-parse v0.2.6
       Fresh flume v0.11.1
       Fresh zbus_macros v5.7.1
       Fresh zbus_names v4.2.0
       Fresh nix v0.30.1
       Fresh async-process v2.3.1
       Fresh atoi v2.0.0
       Fresh sqlx-core v0.8.6
       Fresh async-executor v1.13.2
       Fresh libsqlite3-sys v0.30.1
       Fresh async-broadcast v0.7.2
       Fresh serde_urlencoded v0.7.1
       Fresh async-trait v0.1.88
       Fresh ordered-stream v0.2.0
       Fresh pathdiff v0.2.3
       Fresh hex v0.4.3
       Fresh anstyle v1.0.10
       Fresh colorchoice v1.0.3
       Fresh is_terminal_polyfill v1.70.1
       Fresh anstyle-query v1.1.2
       Fresh zbus v5.7.1
       Fresh anstream v0.6.18
       Fresh sqlx-sqlite v0.8.6
       Fresh open v5.3.2
       Fresh rfd v0.15.3
       Fresh sqlx-macros v0.8.6
       Fresh tauri-plugin-fs v2.3.0
       Fresh env_filter v0.1.3
       Fresh jiff v0.2.14
       Fresh tauri-plugin-dialog v2.2.2
       Fresh env_logger v0.11.8
       Fresh sqlx v0.8.6
       Fresh tauri-plugin-opener v2.2.7
       Dirty radioforms v1.0.0 (/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri): the rerun-if-changed instructions changed
   Compiling radioforms v1.0.0 (/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri)
     Running `CARGO=/home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CFG_FEATURE='' CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_MANIFEST_DIR='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri' CARGO_MANIFEST_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/Cargo.toml' CARGO_PKG_AUTHORS='RadioForms Team' CARGO_PKG_DESCRIPTION='RadioForms - STANDALONE ICS Forms Management Application' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=radioforms CARGO_PKG_README='' CARGO_PKG_REPOSITORY='' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.0.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DEBUG=true DEP_TAURI_CORE:APP__CORE_PLUGIN___PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-e435d2d86447e503/out/tauri-core-app-permission-files' DEP_TAURI_CORE:EVENT__CORE_PLUGIN___PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-e435d2d86447e503/out/tauri-core-event-permission-files' DEP_TAURI_CORE:IMAGE__CORE_PLUGIN___PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-e435d2d86447e503/out/tauri-core-image-permission-files' DEP_TAURI_CORE:MENU__CORE_PLUGIN___PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-e435d2d86447e503/out/tauri-core-menu-permission-files' DEP_TAURI_CORE:PATH__CORE_PLUGIN___PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-e435d2d86447e503/out/tauri-core-path-permission-files' DEP_TAURI_CORE:RESOURCES__CORE_PLUGIN___PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-e435d2d86447e503/out/tauri-core-resources-permission-files' DEP_TAURI_CORE:TRAY__CORE_PLUGIN___PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-e435d2d86447e503/out/tauri-core-tray-permission-files' DEP_TAURI_CORE:WEBVIEW__CORE_PLUGIN___PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-e435d2d86447e503/out/tauri-core-webview-permission-files' DEP_TAURI_CORE:WINDOW__CORE_PLUGIN___PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-e435d2d86447e503/out/tauri-core-window-permission-files' DEP_TAURI_CORE__CORE_PLUGIN___PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-e435d2d86447e503/out/tauri-core-permission-files' DEP_TAURI_DEV=true DEP_TAURI_GLOBAL_API_SCRIPT_PATH=/home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tauri-2.5.1/scripts/bundle.global.js DEP_TAURI_PLUGIN_DIALOG_GLOBAL_API_SCRIPT_PATH=/home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tauri-plugin-dialog-2.2.2/api-iife.js DEP_TAURI_PLUGIN_DIALOG_PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-plugin-dialog-5b7a059852cbcfdc/out/tauri-plugin-dialog-permission-files' DEP_TAURI_PLUGIN_FS_GLOBAL_API_SCRIPT_PATH=/home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tauri-plugin-fs-2.3.0/api-iife.js DEP_TAURI_PLUGIN_FS_GLOBAL_SCOPE_SCHEMA_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-plugin-fs-f69ed97932b19719/out/global-scope.json' DEP_TAURI_PLUGIN_FS_PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-plugin-fs-f69ed97932b19719/out/tauri-plugin-fs-permission-files' DEP_TAURI_PLUGIN_OPENER_GLOBAL_API_SCRIPT_PATH=/home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tauri-plugin-opener-2.2.7/api-iife.js DEP_TAURI_PLUGIN_OPENER_GLOBAL_SCOPE_SCHEMA_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-plugin-opener-f5386dd0ebb56184/out/global-scope.json' DEP_TAURI_PLUGIN_OPENER_PERMISSION_FILES_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/tauri-plugin-opener-f5386dd0ebb56184/out/tauri-plugin-opener-permission-files' HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps:/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug:/home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib:/home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' NUM_JOBS=14 OPT_LEVEL=0 OUT_DIR='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/radioforms-36246a410d3f43ca/out' PROFILE=debug RUSTC=/home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc RUSTDOC=/home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustdoc TARGET=x86_64-unknown-linux-gnu /mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/radioforms-d822090ad67b2f02/build-script-build`
     Running `CARGO=/home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=radioforms_lib CARGO_MANIFEST_DIR='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri' CARGO_MANIFEST_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/Cargo.toml' CARGO_PKG_AUTHORS='RadioForms Team' CARGO_PKG_DESCRIPTION='RadioForms - STANDALONE ICS Forms Management Application' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=radioforms CARGO_PKG_README='' CARGO_PKG_REPOSITORY='' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.0.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' CARGO_PRIMARY_PACKAGE=1 CARGO_SBOM_PATH='' LD_LIBRARY_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps:/home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' OUT_DIR='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/radioforms-36246a410d3f43ca/out' TAURI_ANDROID_PACKAGE_NAME_APP_NAME=app TAURI_ANDROID_PACKAGE_NAME_PREFIX=com_radioforms TAURI_ENV_TARGET_TRIPLE=x86_64-unknown-linux-gnu /home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name radioforms_lib --edition=2021 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=188 --crate-type staticlib --crate-type cdylib --crate-type rlib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=8816c1fae58c015f -C extra-filename=-350230688b4e07a4 --out-dir '/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps' -C 'incremental=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/incremental' -L 'dependency=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps' --extern 'anyhow=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libanyhow-45efe45985e6a877.rmeta' --extern 'chrono=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libchrono-3bfb5a8b0869f151.rmeta' --extern 'env_logger=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libenv_logger-f3d2e5989d150f23.rmeta' --extern 'log=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/liblog-92e021db849161f2.rmeta' --extern 'regex=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libregex-6de55e5cecb3aec0.rmeta' --extern 'serde=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libserde-428a2a3f1dd8d5a0.rmeta' --extern 'serde_json=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libserde_json-ba0078ab1cc4eceb.rmeta' --extern 'sha2=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libsha2-bb33364041e7a421.rmeta' --extern 'sqlx=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libsqlx-9c71e1d8ad02723d.rmeta' --extern 'tauri=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libtauri-d4eb2400fe19eaeb.rmeta' --extern 'tauri_plugin_dialog=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libtauri_plugin_dialog-be7815a11e3aa0e1.rmeta' --extern 'tauri_plugin_fs=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libtauri_plugin_fs-f65330a94d6f765c.rmeta' --extern 'tauri_plugin_opener=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libtauri_plugin_opener-2e8b56543227851d.rmeta' --extern 'thiserror=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libthiserror-91d991433fe16588.rmeta' --extern 'tokio=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libtokio-ad4f3d801c422b44.rmeta' -L 'native=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/ring-b42fb59bdfc4ba24/out' -L 'native=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/libsqlite3-sys-c59c229e5c969833/out' --cfg desktop --cfg dev --check-cfg 'cfg(desktop)' --check-cfg 'cfg(mobile)' --check-cfg 'cfg(dev)'`
warning: unused import: `Type`
  --> src/database/schema.rs:21:21
   |
21 | use sqlx::{FromRow, Type};
   |                     ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Sqlite` and `migrate::MigrateDatabase`
  --> src/database/migrations.rs:23:29
   |
23 | use sqlx::{SqlitePool, Row, migrate::MigrateDatabase, Sqlite};
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^

warning: unused import: `Path`
  --> src/database/migrations.rs:24:17
   |
24 | use std::path::{Path, PathBuf};
   |                 ^^^^

warning: unused import: `std::collections::HashMap`
  --> src/database/migrations.rs:28:5
   |
28 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Executor`
  --> src/database/transactions.rs:23:45
   |
23 | use sqlx::{SqlitePool, Transaction, Sqlite, Executor};
   |                                             ^^^^^^^^

warning: unused import: `anyhow`
  --> src/database/integrity_checker.rs:24:31
   |
24 | use anyhow::{Result, Context, anyhow};
   |                               ^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/database/integrity_checker.rs:27:5
   |
27 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `DatabaseError` and `DatabaseResult`
  --> src/database/integrity_checker.rs:28:31
   |
28 | use crate::database::errors::{DatabaseError, DatabaseResult};
   |                               ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/database/compaction.rs:28:5
   |
28 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `DatabaseError` and `DatabaseResult`
  --> src/database/compaction.rs:29:31
   |
29 | use crate::database::errors::{DatabaseError, DatabaseResult};
   |                               ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `Context`
  --> src/models/form.rs:17:22
   |
17 | use anyhow::{Result, Context};
   |                      ^^^^^^^

warning: unused import: `FormSearchResult as CrudSearchResult`
  --> src/models/form.rs:28:5
   |
28 |     FormSearchResult as CrudSearchResult
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `CreateFormRequest as CreateFormRequestCompat`
   --> src/models/form.rs:327:9
    |
327 | pub use CreateFormRequest as CreateFormRequestCompat;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `UpdateFormRequest as UpdateFormRequestCompat`
   --> src/models/form.rs:328:9
    |
328 | pub use UpdateFormRequest as UpdateFormRequestCompat;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `FormFilters as FormFiltersCompat`
   --> src/models/form.rs:329:9
    |
329 | pub use FormFilters as FormFiltersCompat;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `FormSearchResult as FormSearchResultCompat`
   --> src/models/form.rs:330:9
    |
330 | pub use FormSearchResult as FormSearchResultCompat;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `regex::Regex`
  --> src/models/validation.rs:30:5
   |
30 | use regex::Regex;
   |     ^^^^^^^^^^^^

warning: unused imports: `NaiveDate` and `NaiveTime`
  --> src/models/ics_types.rs:22:29
   |
22 | use chrono::{DateTime, Utc, NaiveDate, NaiveTime};
   |                             ^^^^^^^^^  ^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/models/ics_types.rs:23:5
   |
23 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/models/form_data.rs:24:5
   |
24 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserializer` and `Serializer`
  --> src/models/serde_tests.rs:22:37
   |
22 | use serde::{Deserialize, Serialize, Serializer, Deserializer};
   |                                     ^^^^^^^^^^  ^^^^^^^^^^^^
   |
help: if this is a test module, consider adding a `#[cfg(test)]` to the containing module
  --> src/models/mod.rs:25:1
   |
25 | pub mod serde_tests;
   | ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Value as JsonValue` and `json`
  --> src/models/serde_tests.rs:23:18
   |
23 | use serde_json::{json, Value as JsonValue};
   |                  ^^^^  ^^^^^^^^^^^^^^^^^^
   |
help: if this is a test module, consider adding a `#[cfg(test)]` to the containing module
  --> src/models/mod.rs:25:1
   |
25 | pub mod serde_tests;
   | ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `NaiveDate` and `Utc`
  --> src/models/serde_tests.rs:24:24
   |
24 | use chrono::{DateTime, Utc, NaiveDate, NaiveTime};
   |                        ^^^  ^^^^^^^^^
   |
help: if this is a test module, consider adding a `#[cfg(test)]` to the containing module
  --> src/models/mod.rs:25:1
   |
25 | pub mod serde_tests;
   | ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ValidationEngine` and `ValidationWarning`
  --> src/models/serde_tests.rs:30:25
   |
30 | use super::validation::{ValidationEngine, FormValidationResult, FieldValidationResult, ValidationSummary, ValidationError, ValidationWarning, ValidationInfo, InfoType};
   |                         ^^^^^^^^^^^^^^^^                                                                                   ^^^^^^^^^^^^^^^^^
   |
help: if this is a test module, consider adding a `#[cfg(test)]` to the containing module
  --> src/models/mod.rs:25:1
   |
25 | pub mod serde_tests;
   | ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `FormStatus`, `Form`, and `ICSFormType`
  --> src/models/serde_tests.rs:31:31
   |
31 | use crate::database::schema::{Form, FormStatus, ICSFormType};
   |                               ^^^^  ^^^^^^^^^^  ^^^^^^^^^^^
   |
help: if this is a test module, consider adding a `#[cfg(test)]` to the containing module
  --> src/models/mod.rs:25:1
   |
25 | pub mod serde_tests;
   | ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `FormStatus`, `Form`, `ICSFormType`, and `Setting`
  --> src/models/mod.rs:28:35
   |
28 | pub use crate::database::schema::{Form, FormStatus, ICSFormType, Setting};
   |                                   ^^^^  ^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^

warning: unused import: `form::*`
  --> src/models/mod.rs:29:9
   |
29 | pub use form::*;
   |         ^^^^^^^

warning: unused import: `validation::*`
  --> src/models/mod.rs:30:9
   |
30 | pub use validation::*;
   |         ^^^^^^^^^^^^^

warning: unused import: `export::*`
  --> src/models/mod.rs:31:9
   |
31 | pub use export::*;
   |         ^^^^^^^^^

warning: unused import: `ics_types::*`
  --> src/models/mod.rs:32:9
   |
32 | pub use ics_types::*;
   |         ^^^^^^^^^^^^

warning: unused import: `form_data::*`
  --> src/models/mod.rs:33:9
   |
33 | pub use form_data::*;
   |         ^^^^^^^^^^^^

warning: unused import: `settings_commands::*`
  --> src/commands/mod.rs:28:9
   |
28 | pub use settings_commands::*;
   |         ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `export_commands::*`
  --> src/commands/mod.rs:29:9
   |
29 | pub use export_commands::*;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused imports: `FormStatus` and `Form`
  --> src/services/auto_save.rs:34:31
   |
34 | use crate::database::schema::{Form, FormStatus};
   |                               ^^^^  ^^^^^^^^^^

warning: unused import: `auto_save::*`
  --> src/services/mod.rs:22:9
   |
22 | pub use auto_save::*;
   |         ^^^^^^^^^^^^

warning: unused import: `NaiveTime`
  --> src/utils/serialization.rs:24:40
   |
24 | use chrono::{DateTime, Utc, NaiveDate, NaiveTime};
   |                                        ^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/utils/serialization.rs:25:5
   |
25 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `SerializationMetrics`, `merge_json_objects`, `safe_from_json`, `safe_to_json`, `serialize_optimized`, and `validate_form_json`
  --> src/utils/mod.rs:25:5
   |
25 |     safe_to_json,
   |     ^^^^^^^^^^^^
26 |     safe_from_json,
   |     ^^^^^^^^^^^^^^
27 |     serialize_optimized,
   |     ^^^^^^^^^^^^^^^^^^^
28 |     merge_json_objects,
   |     ^^^^^^^^^^^^^^^^^^
29 |     validate_form_json,
   |     ^^^^^^^^^^^^^^^^^^
30 |     SerializationMetrics,
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `HashMap`
  --> src/templates/parser.rs:25:24
   |
25 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^

warning: unused import: `error`
  --> src/templates/parser.rs:26:24
   |
26 | use log::{debug, warn, error};
   |                        ^^^^^

warning: unused import: `anyhow`
  --> src/templates/validator.rs:23:22
   |
23 | use anyhow::{Result, anyhow};
   |                      ^^^^^^

warning: unused import: `HashSet`
  --> src/templates/validator.rs:24:33
   |
24 | use std::collections::{HashMap, HashSet};
   |                                 ^^^^^^^

warning: unused imports: `DateTime`, `NaiveTime`, and `Utc`
  --> src/templates/validator.rs:26:14
   |
26 | use chrono::{DateTime, Utc, NaiveDate, NaiveTime};
   |              ^^^^^^^^  ^^^             ^^^^^^^^^

warning: unused import: `warn`
  --> src/templates/validator.rs:27:18
   |
27 | use log::{debug, warn};
   |                  ^^^^

warning: unused import: `std::collections::HashMap`
  --> src/templates/resources.rs:23:5
   |
23 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Context` and `anyhow`
  --> src/templates/help.rs:25:22
   |
25 | use anyhow::{Result, anyhow, Context};
   |                      ^^^^^^  ^^^^^^^

warning: unused import: `warn`
  --> src/templates/help.rs:26:18
   |
26 | use log::{debug, warn};
   |                  ^^^^

warning: unused imports: `Deserialize` and `Serialize`
  --> src/templates/mod.rs:38:13
   |
38 | use serde::{Deserialize, Serialize};
   |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused imports: `DateTime` and `Utc`
  --> src/templates/mod.rs:39:14
   |
39 | use chrono::{DateTime, Utc};
   |              ^^^^^^^^  ^^^

warning: unused import: `Context`
  --> src/templates/mod.rs:41:22
   |
41 | use anyhow::{Result, Context};
   |                      ^^^^^^^

warning: variable does not need to be mutable
   --> src/database/mod.rs:146:13
    |
146 |         let mut runner = MigrationRunnerFactory::create_production_runner(
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

error[E0382]: borrow of partially moved value: `migration_info`
   --> src/database/migrations.rs:296:82
    |
285 |                         checksum: migration_info.checksum,
    |                                   ----------------------- value partially moved here
...
296 |                             if let Err(rollback_error) = self.rollback_migration(&migration_info).await {
    |                                                                                  ^^^^^^^^^^^^^^^ value borrowed here after partial move
    |
    = note: partial move occurs because `migration_info.checksum` has type `std::string::String`, which does not implement the `Copy` trait

error[E0277]: the trait bound `T: std::default::Default` is not satisfied
   --> src/database/transactions.rs:242:25
    |
242 |                 result: Default::default(), // This won't be used since success = false
    |                         ^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `T`
    |
help: consider further restricting type parameter `T` with trait `Default`
    |
148 |         T: Send + 'static + std::default::Default,
    |                           +++++++++++++++++++++++

error: future cannot be sent between threads safely
   --> src/database/transactions.rs:271:13
    |
271 | /             Box::pin(async move {
272 | |                 let mut batch_results = Vec::new();
273 | |
274 | |                 for operation in operations {
...   |
282 | |                 Ok::<Vec<(T, u64)>, anyhow::Error>(batch_results)
283 | |             })
    | |______________^ future created by async block is not `Send`
    |
note: captured value is not `Send`
   --> src/database/transactions.rs:274:34
    |
274 |                 for operation in operations {
    |                                  ^^^^^^^^^^ has type `Vec<F>` which is not `Send`
    = note: required for the cast from `Pin<Box<{async block@src/database/transactions.rs:271:22: 271:32}>>` to `Pin<Box<dyn Future<Output = Result<Vec<(T, u64)>, anyhow::Error>> + Send>>`
help: consider further restricting type parameter `F` with trait `Send`
    |
260 |         F: for<'c> FnOnce(&mut Transaction<'c, Sqlite>) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<T>> + Send + 'c>> + std::marker::Send,
    |                                                                                                                                        +++++++++++++++++++

warning: unused variable: `tx_result`
   --> src/database/transactions.rs:336:20
    |
336 |                 Ok(tx_result) => {
    |                    ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tx_result`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:257:28
    |
257 |                 .fetch_one(tx)
    |                  --------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryScalar::<'q, DB, O, A>::fetch_one`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:160:17
    |
157 |     pub async fn fetch_one<'e, 'c: 'e, E>(self, executor: E) -> Result<O, Error>
    |                  --------- required by a bound in this associated function
...
160 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, A>::fetch_one`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:237:31
    |
237 |                   let form_id = sqlx::query_scalar::<_, i64>(
    |  _______________________________^
238 | |                     r#"
239 | |                     INSERT INTO forms (
240 | |                         form_type, incident_name, incident_number, status, data,
...   |
256 | |                 .bind(&request.priority.as_deref().unwrap_or("routine"))
257 | |                 .fetch_one(tx)
    | |______________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryScalar::<'q, DB, O, A>::fetch_one`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:160:17
    |
157 |     pub async fn fetch_one<'e, 'c: 'e, E>(self, executor: E) -> Result<O, Error>
    |                  --------- required by a bound in this associated function
...
160 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, A>::fetch_one`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:258:18
    |
258 |                 .await
    |                  ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryScalar::<'q, DB, O, A>::fetch_one`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:160:17
    |
157 |     pub async fn fetch_one<'e, 'c: 'e, E>(self, executor: E) -> Result<O, Error>
    |                  --------- required by a bound in this associated function
...
160 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, A>::fetch_one`

error[E0277]: `?` couldn't convert the error to `errors::DatabaseError`
   --> src/database/crud_operations.rs:259:62
    |
237 |                   let form_id = sqlx::query_scalar::<_, i64>(
    |  _______________________________-
238 | |                     r#"
239 | |                     INSERT INTO forms (
240 | |                         form_type, incident_name, incident_number, status, data,
...   |
257 | |                 .fetch_one(tx)
258 | |                 .await
    | |______________________- this has type `Result<_, sqlx::Error>`
259 |                   .context("Failed to create form in database")?;
    |                    --------------------------------------------^ the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
    |                    |
    |                    this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `errors::DatabaseError` needs to implement `From<anyhow::Error>`
   --> src/database/errors.rs:37:1
    |
37  | pub enum DatabaseError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
            but trait `From<sqlx::Error>` is implemented for it
    = help: for that trait implementation, expected `sqlx::Error`, found `anyhow::Error`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:273:26
    |
273 |                 .execute(tx)
    |                  ------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:262:17
    |
262 | /                 sqlx::query(
263 | |                     r#"
264 | |                     INSERT INTO form_status_history (
265 | |                         form_id, from_status, to_status, changed_by,
...   |
272 | |                 .bind(&request.preparer_name.as_deref().unwrap_or("system"))
273 | |                 .execute(tx)
    | |____________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:274:18
    |
274 |                 .await
    |                  ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: `?` couldn't convert the error to `errors::DatabaseError`
   --> src/database/crud_operations.rs:275:66
    |
262 | /                 sqlx::query(
263 | |                     r#"
264 | |                     INSERT INTO form_status_history (
265 | |                         form_id, from_status, to_status, changed_by,
...   |
273 | |                 .execute(tx)
274 | |                 .await
    | |______________________- this has type `Result<_, sqlx::Error>`
275 |                   .context("Failed to create status history entry")?;
    |                    ------------------------------------------------^ the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
    |                    |
    |                    this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `errors::DatabaseError` needs to implement `From<anyhow::Error>`
   --> src/database/errors.rs:37:1
    |
37  | pub enum DatabaseError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
            but trait `From<sqlx::Error>` is implemented for it
    = help: for that trait implementation, expected `sqlx::Error`, found `anyhow::Error`

error[E0599]: no variant or associated item named `internal` found for enum `errors::DatabaseError` in the current scope
   --> src/database/crud_operations.rs:279:51
    |
279 |                     .ok_or_else(|| DatabaseError::internal(
    |                                                   ^^^^^^^^ variant or associated item not found in `DatabaseError`
    |
   ::: src/database/errors.rs:37:1
    |
37  | pub enum DatabaseError {
    | ---------------------- variant or associated item `internal` not found for this enum
    |
note: if you're trying to build a new `errors::DatabaseError` consider using one of the following associated functions:
      errors::DatabaseError::connection
      errors::DatabaseError::transaction
      errors::DatabaseError::validation
      errors::DatabaseError::integrity
      and 4 others
   --> src/database/errors.rs:161:5
    |
161 |     pub fn connection(message: impl Into<String>, details: Option<String>, is_retryable: bool) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
171 |     pub fn transaction(message: impl Into<String>, operation: impl Into<String>, is_retryable: bool) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
182 |     pub fn validation(message: impl Into<String>, field: Option<String>, value: Option<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
193 |     pub fn integrity(message: impl Into<String>, table: Option<String>, constraint: Option<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
279 -                     .ok_or_else(|| DatabaseError::internal(
280 -                         "Failed to retrieve created form",
281 -                         Some("FORM_RETRIEVAL_FAILED".to_string()),
282 -                         Some("Check database integrity".to_string())
283 -                     ))?;
279 +                     .ok_or_else(|| DatabaseError::Internal { message: /* value */, error_code: /* value */, recovery_hint: /* value */, occurred_at: /* value */ })?;
    |

error[E0308]: mismatched types
   --> src/database/crud_operations.rs:159:9
    |
159 | /         self.transaction_manager.execute_transaction(|tx| {
160 | |             Box::pin(async move {
161 | |                 // Validate required fields
162 | |                 if request.incident_name.trim().is_empty() {
...   |
286 | |             })
287 | |         }).await
    | |________________^ expected `Result<TransactionResult<Form>, DatabaseError>`, found `Result<TransactionResult<_>, Error>`
    |
    = note: expected enum `Result<TransactionResult<Form>, errors::DatabaseError>`
               found enum `Result<TransactionResult<_>, anyhow::Error>`

error[E0277]: `?` couldn't convert the error to `errors::DatabaseError`
   --> src/database/crud_operations.rs:321:55
    |
306 |           let form = sqlx::query_as::<_, Form>(
    |  ____________________-
307 | |             r#"
308 | |             SELECT
309 | |                 id, form_type, incident_name, incident_number, status, data, notes,
...   |
319 | |         .fetch_optional(&self.pool)
320 | |         .await
    | |______________- this has type `Result<_, sqlx::Error>`
321 |           .context("Failed to fetch form from database")?;
    |            ---------------------------------------------^ the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
    |            |
    |            this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `errors::DatabaseError` needs to implement `From<anyhow::Error>`
   --> src/database/errors.rs:37:1
    |
37  | pub enum DatabaseError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
            but trait `From<sqlx::Error>` is implemented for it
    = help: for that trait implementation, expected `sqlx::Error`, found `anyhow::Error`

error[E0609]: no field `version` on type `Form`
   --> src/database/crud_operations.rs:343:37
    |
343 |                     if current_form.version != expected_version {
    |                                     ^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `form_type`, `incident_name`, `incident_number`, `status` ... and 5 others

error[E0609]: no field `version` on type `Form`
   --> src/database/crud_operations.rs:346:60
    |
346 | ...                   expected_version, current_form.version
    |                                                      ^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `form_type`, `incident_name`, `incident_number`, `status` ... and 5 others

error[E0308]: mismatched types
   --> src/database/crud_operations.rs:353:79
    |
353 |                     if !self.is_valid_status_transition(&current_form.status, new_status)? {
    |                              --------------------------                       ^^^^^^^^^^ expected `&str`, found `&FormStatus`
    |                              |
    |                              arguments to this method are incorrect
    |
    = note: expected reference `&str`
               found reference `&FormStatus`
note: method defined here
   --> src/database/crud_operations.rs:723:8
    |
723 |     fn is_valid_status_transition(&self, current: &str, new: &str) -> DatabaseResult<bool> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^                       ---------

error[E0609]: no field `workflow_position` on type `Form`
   --> src/database/crud_operations.rs:406:89
    |
406 |                     .bind(&request.workflow_position.as_deref().unwrap_or(&current_form.workflow_position))
    |                                                                                         ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `form_type`, `incident_name`, `incident_number`, `status` ... and 5 others

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:407:30
    |
407 |                     .execute(tx)
    |                      ------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |                      |
    |                      required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:393:21
    |
393 | /                     sqlx::query(
394 | |                         r#"
395 | |                         INSERT INTO form_status_history (
396 | |                             form_id, from_status, to_status, changed_by,
...   |
406 | |                     .bind(&request.workflow_position.as_deref().unwrap_or(&current_form.workflow_position))
407 | |                     .execute(tx)
    | |________________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:408:22
    |
408 |                     .await
    |                      ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>: sqlx::Encode<'_, _>` is not satisfied
   --> src/database/crud_operations.rs:451:54
    |
451 |                         sqlx_query = sqlx_query.bind(value);
    |                                                 ---- ^^^^^ the trait `sqlx::Encode<'_, _>` is not implemented for `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>`
    |                                                 |
    |                                                 required by a bound introduced by this call
    |
    = help: the following other types implement trait `sqlx::Encode<'q, DB>`:
              Box<[u8]>
              Box<str>
note: required by a bound in `Query::<'q, DB, <DB as sqlx::Database>::Arguments<'q>>::bind`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:86:25
    |
86  |     pub fn bind<T: 'q + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {
    |                         ^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, <DB as Database>::Arguments<'q>>::bind`

error[E0277]: the trait bound `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>: Type<_>` is not satisfied
   --> src/database/crud_operations.rs:451:54
    |
451 |                         sqlx_query = sqlx_query.bind(value);
    |                                                 ---- ^^^^^ the trait `Type<_>` is not implemented for `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>`
    |                                                 |
    |                                                 required by a bound introduced by this call
    |
    = help: the following other types implement trait `Type<DB>`:
              Box<[u8]>
              Box<str>
note: required by a bound in `Query::<'q, DB, <DB as sqlx::Database>::Arguments<'q>>::bind`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:86:42
    |
86  |     pub fn bind<T: 'q + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {
    |                                          ^^^^^^^^ required by this bound in `Query::<'q, DB, <DB as Database>::Arguments<'q>>::bind`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:456:34
    |
456 |                         .execute(tx)
    |                          ------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |                          |
    |                          required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:455:21
    |
455 | /                     sqlx_query
456 | |                         .execute(tx)
    | |____________________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:457:26
    |
457 |                         .await
    |                          ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0308]: mismatched types
   --> src/database/crud_operations.rs:335:9
    |
335 | /         self.transaction_manager.execute_transaction(|tx| {
336 | |             Box::pin(async move {
337 | |                 // Get current form for validation and optimistic locking
338 | |                 let current_form = self.get_form_by_id_tx(tx, id).await?
...   |
466 | |             })
467 | |         }).await
    | |________________^ expected `Result<TransactionResult<Form>, DatabaseError>`, found `Result<TransactionResult<Form>, Error>`
    |
    = note: expected enum `Result<_, errors::DatabaseError>`
               found enum `Result<_, anyhow::Error>`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:501:28
    |
501 |                 .fetch_one(tx)
    |                  --------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryScalar::<'q, DB, O, A>::fetch_one`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:160:17
    |
157 |     pub async fn fetch_one<'e, 'c: 'e, E>(self, executor: E) -> Result<O, Error>
    |                  --------- required by a bound in this associated function
...
160 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, A>::fetch_one`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:497:42
    |
497 |                   let relationship_count = sqlx::query_scalar::<_, i64>(
    |  __________________________________________^
498 | |                     "SELECT COUNT(*) FROM form_relationships WHERE source_form_id = ?1 OR target_form_id = ?1"
499 | |                 )
500 | |                 .bind(id)
501 | |                 .fetch_one(tx)
    | |______________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryScalar::<'q, DB, O, A>::fetch_one`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:160:17
    |
157 |     pub async fn fetch_one<'e, 'c: 'e, E>(self, executor: E) -> Result<O, Error>
    |                  --------- required by a bound in this associated function
...
160 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, A>::fetch_one`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:502:18
    |
502 |                 .await
    |                  ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryScalar::<'q, DB, O, A>::fetch_one`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:160:17
    |
157 |     pub async fn fetch_one<'e, 'c: 'e, E>(self, executor: E) -> Result<O, Error>
    |                  --------- required by a bound in this associated function
...
160 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, A>::fetch_one`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:517:30
    |
517 |                     .execute(tx)
    |                      ------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |                      |
    |                      required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:515:17
    |
515 | /                 sqlx::query("DELETE FROM form_signatures WHERE form_id = ?1")
516 | |                     .bind(id)
517 | |                     .execute(tx)
    | |________________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:518:22
    |
518 |                     .await
    |                      ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:524:30
    |
524 |                     .execute(tx)
    |                      ------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |                      |
    |                      required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:522:17
    |
522 | /                 sqlx::query("DELETE FROM form_status_history WHERE form_id = ?1")
523 | |                     .bind(id)
524 | |                     .execute(tx)
    | |________________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:525:22
    |
525 |                     .await
    |                      ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:531:30
    |
531 |                     .execute(tx)
    |                      ------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |                      |
    |                      required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:529:17
    |
529 | /                 sqlx::query("DELETE FROM form_relationships WHERE source_form_id = ?1 OR target_form_id = ?1")
530 | |                     .bind(id)
531 | |                     .execute(tx)
    | |________________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:532:22
    |
532 |                     .await
    |                      ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:538:30
    |
538 |                     .execute(tx)
    |                      ------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |                      |
    |                      required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:536:30
    |
536 |                   let result = sqlx::query("DELETE FROM forms WHERE id = ?1")
    |  ______________________________^
537 | |                     .bind(id)
538 | |                     .execute(tx)
    | |________________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:539:22
    |
539 |                     .await
    |                      ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `Query::<'q, DB, A>::execute`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query.rs:188:12
    |
184 |     pub async fn execute<'e, 'c: 'e, E>(self, executor: E) -> Result<DB::QueryResult, Error>
    |                  ------- required by a bound in this associated function
...
188 |         E: Executor<'c, Database = DB>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Query::<'q, DB, A>::execute`

error[E0308]: mismatched types
   --> src/database/crud_operations.rs:479:9
    |
479 | /         self.transaction_manager.execute_transaction(|tx| {
480 | |             Box::pin(async move {
481 | |                 // Check if form exists and get its status
482 | |                 let form = self.get_form_by_id_tx(tx, id).await?;
...   |
543 | |             })
544 | |         }).await
    | |________________^ expected `Result<TransactionResult<bool>, DatabaseError>`, found `Result<TransactionResult<bool>, Error>`
    |
    = note: expected enum `Result<_, errors::DatabaseError>`
               found enum `Result<_, anyhow::Error>`

error[E0277]: the trait bound `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>: sqlx::Encode<'_, _>` is not satisfied
   --> src/database/crud_operations.rs:628:54
    |
628 |             count_sqlx_query = count_sqlx_query.bind(value);
    |                                                 ---- ^^^^^ the trait `sqlx::Encode<'_, _>` is not implemented for `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>`
    |                                                 |
    |                                                 required by a bound introduced by this call
    |
    = help: the following other types implement trait `sqlx::Encode<'q, DB>`:
              Box<[u8]>
              Box<str>
    = note: required for `&Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>` to implement `sqlx::Encode<'_, _>`
note: required by a bound in `QueryScalar::<'q, DB, O, <DB as sqlx::Database>::Arguments<'q>>::bind`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:51:25
    |
51  |     pub fn bind<T: 'q + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {
    |                         ^^^^^^^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, <DB as Database>::Arguments<'q>>::bind`

error[E0277]: the trait bound `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>: Type<_>` is not satisfied
   --> src/database/crud_operations.rs:628:54
    |
628 |             count_sqlx_query = count_sqlx_query.bind(value);
    |                                                 ---- ^^^^^ the trait `Type<_>` is not implemented for `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>`
    |                                                 |
    |                                                 required by a bound introduced by this call
    |
    = help: the following other types implement trait `Type<DB>`:
              Box<[u8]>
              Box<str>
    = note: required for `&Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>` to implement `Type<_>`
note: required by a bound in `QueryScalar::<'q, DB, O, <DB as sqlx::Database>::Arguments<'q>>::bind`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:51:42
    |
51  |     pub fn bind<T: 'q + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {
    |                                          ^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, <DB as Database>::Arguments<'q>>::bind`

error[E0277]: `?` couldn't convert the error to `errors::DatabaseError`
   --> src/database/crud_operations.rs:634:50
    |
631 |           let total_count = count_sqlx_query
    |  ___________________________-
632 | |             .fetch_one(&self.pool)
633 | |             .await
    | |__________________- this has type `Result<_, sqlx::Error>`
634 |               .context("Failed to get total count")?;
    |                ------------------------------------^ the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
    |                |
    |                this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `errors::DatabaseError` needs to implement `From<anyhow::Error>`
   --> src/database/errors.rs:37:1
    |
37  | pub enum DatabaseError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
            but trait `From<sqlx::Error>` is implemented for it
    = help: for that trait implementation, expected `sqlx::Error`, found `anyhow::Error`

error[E0277]: the trait bound `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>: sqlx::Encode<'_, _>` is not satisfied
   --> src/database/crud_operations.rs:653:54
    |
653 |             forms_sqlx_query = forms_sqlx_query.bind(value);
    |                                                 ---- ^^^^^ the trait `sqlx::Encode<'_, _>` is not implemented for `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>`
    |                                                 |
    |                                                 required by a bound introduced by this call
    |
    = help: the following other types implement trait `sqlx::Encode<'q, DB>`:
              Box<[u8]>
              Box<str>
note: required by a bound in `QueryAs::<'q, DB, O, <DB as sqlx::Database>::Arguments<'q>>::bind`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_as.rs:54:25
    |
54  |     pub fn bind<T: 'q + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {
    |                         ^^^^^^^^^^^^^^ required by this bound in `QueryAs::<'q, DB, O, <DB as Database>::Arguments<'q>>::bind`

error[E0277]: the trait bound `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>: Type<_>` is not satisfied
   --> src/database/crud_operations.rs:653:54
    |
653 |             forms_sqlx_query = forms_sqlx_query.bind(value);
    |                                                 ---- ^^^^^ the trait `Type<_>` is not implemented for `Box<dyn sqlx::Encode<'_, Sqlite> + Send + Sync>`
    |                                                 |
    |                                                 required by a bound introduced by this call
    |
    = help: the following other types implement trait `Type<DB>`:
              Box<[u8]>
              Box<str>
note: required by a bound in `QueryAs::<'q, DB, O, <DB as sqlx::Database>::Arguments<'q>>::bind`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_as.rs:54:42
    |
54  |     pub fn bind<T: 'q + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {
    |                                          ^^^^^^^^ required by this bound in `QueryAs::<'q, DB, O, <DB as Database>::Arguments<'q>>::bind`

error[E0277]: `?` couldn't convert the error to `errors::DatabaseError`
   --> src/database/crud_operations.rs:659:46
    |
656 |           let forms = forms_sqlx_query
    |  _____________________-
657 | |             .fetch_all(&self.pool)
658 | |             .await
    | |__________________- this has type `Result<_, sqlx::Error>`
659 |               .context("Failed to fetch forms")?;
    |                --------------------------------^ the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
    |                |
    |                this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `errors::DatabaseError` needs to implement `From<anyhow::Error>`
   --> src/database/errors.rs:37:1
    |
37  | pub enum DatabaseError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
            but trait `From<sqlx::Error>` is implemented for it
    = help: for that trait implementation, expected `sqlx::Error`, found `anyhow::Error`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:696:25
    |
696 |         .fetch_optional(tx)
    |          -------------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |          |
    |          required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryAs::<'q, DB, O, A>::fetch_optional`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_as.rs:188:17
    |
185 |     pub async fn fetch_optional<'e, 'c: 'e, E>(self, executor: E) -> Result<Option<O>, Error>
    |                  -------------- required by a bound in this associated function
...
188 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryAs::<'q, DB, O, A>::fetch_optional`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:683:20
    |
683 |           let form = sqlx::query_as::<_, Form>(
    |  ____________________^
684 | |             r#"
685 | |             SELECT
686 | |                 id, form_type, incident_name, incident_number, status, data, notes,
...   |
695 | |         .bind(id)
696 | |         .fetch_optional(tx)
    | |___________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryAs::<'q, DB, O, A>::fetch_optional`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_as.rs:188:17
    |
185 |     pub async fn fetch_optional<'e, 'c: 'e, E>(self, executor: E) -> Result<Option<O>, Error>
    |                  -------------- required by a bound in this associated function
...
188 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryAs::<'q, DB, O, A>::fetch_optional`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:697:10
    |
697 |         .await
    |          ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryAs::<'q, DB, O, A>::fetch_optional`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_as.rs:188:17
    |
185 |     pub async fn fetch_optional<'e, 'c: 'e, E>(self, executor: E) -> Result<Option<O>, Error>
    |                  -------------- required by a bound in this associated function
...
188 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryAs::<'q, DB, O, A>::fetch_optional`

error[E0277]: `?` couldn't convert the error to `errors::DatabaseError`
   --> src/database/crud_operations.rs:698:55
    |
683 |           let form = sqlx::query_as::<_, Form>(
    |  ____________________-
684 | |             r#"
685 | |             SELECT
686 | |                 id, form_type, incident_name, incident_number, status, data, notes,
...   |
696 | |         .fetch_optional(tx)
697 | |         .await
    | |______________- this has type `Result<_, sqlx::Error>`
698 |           .context("Failed to fetch form from database")?;
    |            ---------------------------------------------^ the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
    |            |
    |            this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `errors::DatabaseError` needs to implement `From<anyhow::Error>`
   --> src/database/errors.rs:37:1
    |
37  | pub enum DatabaseError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
            but trait `From<sqlx::Error>` is implemented for it
    = help: for that trait implementation, expected `sqlx::Error`, found `anyhow::Error`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:709:25
    |
709 |         .fetch_optional(tx)
    |          -------------- ^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |          |
    |          required by a bound introduced by this call
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryScalar::<'q, DB, O, A>::fetch_optional`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:184:17
    |
181 |     pub async fn fetch_optional<'e, 'c: 'e, E>(self, executor: E) -> Result<Option<O>, Error>
    |                  -------------- required by a bound in this associated function
...
184 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, A>::fetch_optional`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:705:29
    |
705 |           let template_data = sqlx::query_scalar::<_, String>(
    |  _____________________________^
706 | |             "SELECT template_data FROM form_templates WHERE id = ?1 AND is_active = 1"
707 | |         )
708 | |         .bind(template_id)
709 | |         .fetch_optional(tx)
    | |___________________________^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryScalar::<'q, DB, O, A>::fetch_optional`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:184:17
    |
181 |     pub async fn fetch_optional<'e, 'c: 'e, E>(self, executor: E) -> Result<Option<O>, Error>
    |                  -------------- required by a bound in this associated function
...
184 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, A>::fetch_optional`

error[E0277]: the trait bound `&mut Transaction<'_, Sqlite>: Executor<'_>` is not satisfied
   --> src/database/crud_operations.rs:710:10
    |
710 |         .await
    |          ^^^^^ the trait `Executor<'_>` is not implemented for `&mut Transaction<'_, Sqlite>`
    |
    = help: the following other types implement trait `Executor<'c>`:
              `&'c mut AnyConnection` implements `Executor<'c>`
              `&'c mut SqliteConnection` implements `Executor<'c>`
              `&Pool<DB>` implements `Executor<'p>`
note: required by a bound in `QueryScalar::<'q, DB, O, A>::fetch_optional`
   --> /home/davistroy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/query_scalar.rs:184:17
    |
181 |     pub async fn fetch_optional<'e, 'c: 'e, E>(self, executor: E) -> Result<Option<O>, Error>
    |                  -------------- required by a bound in this associated function
...
184 |         E: 'e + Executor<'c, Database = DB>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryScalar::<'q, DB, O, A>::fetch_optional`

error[E0277]: `?` couldn't convert the error to `errors::DatabaseError`
   --> src/database/crud_operations.rs:711:50
    |
705 |           let template_data = sqlx::query_scalar::<_, String>(
    |  _____________________________-
706 | |             "SELECT template_data FROM form_templates WHERE id = ?1 AND is_active = 1"
707 | |         )
708 | |         .bind(template_id)
709 | |         .fetch_optional(tx)
710 | |         .await
    | |______________- this has type `Result<_, sqlx::Error>`
711 |           .context("Failed to fetch template data")?;
    |            ----------------------------------------^ the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
    |            |
    |            this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `errors::DatabaseError` needs to implement `From<anyhow::Error>`
   --> src/database/errors.rs:37:1
    |
37  | pub enum DatabaseError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `From<anyhow::Error>` is not implemented for `errors::DatabaseError`
            but trait `From<sqlx::Error>` is implemented for it
    = help: for that trait implementation, expected `sqlx::Error`, found `anyhow::Error`

error[E0308]: mismatched types
   --> src/database/crud_operations.rs:715:17
    |
715 | /                 serde_json::from_str(&data)
716 | |                     .context("Failed to parse template data")
    | |_____________________________________________________________^ expected `Result<HashMap<String, Value>, DatabaseError>`, found `Result<_, Error>`
    |
    = note: expected enum `Result<HashMap<std::string::String, JsonValue>, errors::DatabaseError>`
               found enum `Result<_, anyhow::Error>`
help: use the `?` operator to extract the `Result<_, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
716 |                     .context("Failed to parse template data")?
    |                                                              +

warning: unused variable: `db_size`
   --> src/database/compaction.rs:490:13
    |
490 |         let db_size = self.get_database_size().await?;
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_db_size`

error[E0716]: temporary value dropped while borrowed
   --> src/database/compaction.rs:674:27
    |
671 | /             sqlx::query(&format!("REINDEX {}", index_name))
672 | |                 .execute(&self.pool)
673 | |                 .await
674 | |                 .context(&format!("Failed to rebuild index: {}", index_name))?;
    | |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- - temporary value is freed at the end of this statement
    | |___________________________|_________________________________________________|
    |                             |                                                 argument requires that borrow lasts for `'static`
    |                             creates a temporary value which is freed while still in use
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0716]: temporary value dropped while borrowed
   --> src/database/compaction.rs:695:27
    |
692 | /             sqlx::query(&format!("ANALYZE {}", table_name))
693 | |                 .execute(&self.pool)
694 | |                 .await
695 | |                 .context(&format!("Failed to analyze table: {}", table_name))?;
    | |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- - temporary value is freed at the end of this statement
    | |___________________________|_________________________________________________|
    |                             |                                                 argument requires that borrow lasts for `'static`
    |                             creates a temporary value which is freed while still in use
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/models/form.rs:154:9
    |
154 |         self.database.crud().get_form_by_id(id).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Option<Form>, Error>`, found `Result<Option<Form>, DatabaseError>`
    |
    = note: expected enum `Result<_, anyhow::Error>`
               found enum `Result<_, errors::DatabaseError>`

warning: unused variable: `db`
   --> src/commands/form_commands.rs:141:9
    |
141 |     let db = state.lock().await;
    |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `db`
   --> src/commands/form_commands.rs:237:9
    |
237 |     let db = state.lock().await;
    |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `db`
   --> src/commands/form_commands.rs:337:9
    |
337 |     let db = state.lock().await;
    |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `db`
   --> src/commands/form_commands.rs:397:9
    |
397 |     let db = state.lock().await;
    |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `db`
   --> src/commands/form_commands.rs:504:9
    |
504 |     let db = state.lock().await;
    |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `db`
   --> src/commands/form_commands.rs:564:9
    |
564 |     let db = state.lock().await;
    |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `db`
   --> src/commands/form_commands.rs:598:9
    |
598 |     let db = state.lock().await;
    |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `db`
   --> src/commands/form_commands.rs:645:9
    |
645 |     let db = state.lock().await;
    |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `db`
   --> src/services/auto_save.rs:393:13
    |
393 |         let db = self.database.lock().await;
    |             ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused import: `Executor`
  --> src/database/crud_operations.rs:24:45
   |
24 | use sqlx::{SqlitePool, Transaction, Sqlite, Executor};
   |                                             ^^^^^^^^

warning: unused import: `Row`
  --> src/database/integrity_checker.rs:23:24
   |
23 | use sqlx::{SqlitePool, Row};
   |                        ^^^

warning: unused variable: `version`
   --> src/templates/loader.rs:175:57
    |
175 |     pub fn get_template_version(&self, form_type: &str, version: &str) -> Option<&FormTemplate> {
    |                                                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_version`

Some errors have detailed explanations: E0277, E0308, E0382, E0599, E0609, E0716.
For more information about an error, try `rustc --explain E0277`.
warning: `radioforms` (lib) generated 65 warnings
error: could not compile `radioforms` (lib) due to 61 previous errors; 65 warnings emitted

Caused by:
  process didn't exit successfully: `CARGO=/home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=radioforms_lib CARGO_MANIFEST_DIR='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri' CARGO_MANIFEST_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/Cargo.toml' CARGO_PKG_AUTHORS='RadioForms Team' CARGO_PKG_DESCRIPTION='RadioForms - STANDALONE ICS Forms Management Application' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=radioforms CARGO_PKG_README='' CARGO_PKG_REPOSITORY='' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.0.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' CARGO_PRIMARY_PACKAGE=1 CARGO_SBOM_PATH='' LD_LIBRARY_PATH='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps:/home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' OUT_DIR='/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/radioforms-36246a410d3f43ca/out' TAURI_ANDROID_PACKAGE_NAME_APP_NAME=app TAURI_ANDROID_PACKAGE_NAME_PREFIX=com_radioforms TAURI_ENV_TARGET_TRIPLE=x86_64-unknown-linux-gnu /home/davistroy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name radioforms_lib --edition=2021 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=188 --crate-type staticlib --crate-type cdylib --crate-type rlib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=8816c1fae58c015f -C extra-filename=-350230688b4e07a4 --out-dir '/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps' -C 'incremental=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/incremental' -L 'dependency=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps' --extern 'anyhow=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libanyhow-45efe45985e6a877.rmeta' --extern 'chrono=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libchrono-3bfb5a8b0869f151.rmeta' --extern 'env_logger=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libenv_logger-f3d2e5989d150f23.rmeta' --extern 'log=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/liblog-92e021db849161f2.rmeta' --extern 'regex=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libregex-6de55e5cecb3aec0.rmeta' --extern 'serde=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libserde-428a2a3f1dd8d5a0.rmeta' --extern 'serde_json=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libserde_json-ba0078ab1cc4eceb.rmeta' --extern 'sha2=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libsha2-bb33364041e7a421.rmeta' --extern 'sqlx=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libsqlx-9c71e1d8ad02723d.rmeta' --extern 'tauri=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libtauri-d4eb2400fe19eaeb.rmeta' --extern 'tauri_plugin_dialog=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libtauri_plugin_dialog-be7815a11e3aa0e1.rmeta' --extern 'tauri_plugin_fs=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libtauri_plugin_fs-f65330a94d6f765c.rmeta' --extern 'tauri_plugin_opener=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libtauri_plugin_opener-2e8b56543227851d.rmeta' --extern 'thiserror=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libthiserror-91d991433fe16588.rmeta' --extern 'tokio=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/deps/libtokio-ad4f3d801c422b44.rmeta' -L 'native=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/ring-b42fb59bdfc4ba24/out' -L 'native=/mnt/c/Users/Troy Davis/OneDrive/Projects/code/scratch/radioforms/src-tauri/target/debug/build/libsqlite3-sys-c59c229e5c969833/out' --cfg desktop --cfg dev --check-cfg 'cfg(desktop)' --check-cfg 'cfg(mobile)' --check-cfg 'cfg(dev)'` (exit status: 1)